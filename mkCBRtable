#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Create the LaTEX tables from the sca files in the ZIP archive
with the results (from run-test.bash)"""

import os
import re
import sys
import argparse
from zipfile import ZipFile

statRe = re.compile(r'^field (m(ean|in|ax)) (\d+(\.\d+)?)')
valRe =re.compile(r'^statistic . real time app (delay|jitter)')

def main():
    fields = [ 'mean', 'min', 'max' ]
    stream = [ 'audio',  'video' ]
    mark =   [ 'nomark', 'mark' ]

    #
    # Print LATeX tabular head
    #
    head =   [ 'stream' , 'mark', 'delay', 'min', 'max', 'jitter' ]
    fmt = '{:6s} & '
    for h in head:
        print (fmt.format(h),end='')
        if h == 'mark': fmt = '{:8s} & '
        if h == 'max': fmt = '{:8s} \\\\ \\midrule'
    print()

    # nodes=2
    parser = argparse.ArgumentParser(description=__doc__,formatter_class=argparse.RawDescriptionHelpFormatter,epilog='')
    parser.add_argument('ZIP', metavar='ZIP', type=str, help='ZIP file with simulation results')
    parser.add_argument('-V','--verbose',  dest='verbose',action='store_true', help='Print extra info to stderr')

    args = parser.parse_args()
    if args.verbose:
        print('Contents of {}:\n '.format(args.ZIP),end='',file=sys.stderr)
    with ZipFile(args.ZIP) as simul:
        sca_files = sorted([l for l in simul.namelist() if l.endswith('.sca')])
        if args.verbose:
            print("\n ".join(sca_files),file=sys.stderr)
        for elem in sca_files:
            result = dict()
            statType = None
            with simul.open(elem,'r') as myfile:
                for l in myfile.readlines():
                    line = l.decode().strip()
                    mStat = statRe.match(line)
                    mVal  = valRe.match(line)
                    if mStat is None and mVal is None:
                        continue
                    if mVal is not None:
                        statType = mVal.group(1)
                        result[statType] = dict()

                    if mStat is not None:
                        rDict = result[statType]
                        rDict[mStat.group(1)] = mStat.group(3)

                if args.verbose:
                    print ('Parsed {} and obtained '.format(elem),file=sys.stderr)
                    print (result,file=sys.stderr)
                base = os.path.basename(elem)
                base,_=os.path.splitext(base)
                # if args.verbose:
                #     print(">> {}\n{}\n".format(base,repr(base.split('-'))))
                m = base.split('-')

                print ('{:6s} & {:6s} & '.format(m[4],m[5]), end='')
                for f in fields:
                    print ('{:8s} & '.format(result['delay'][f]),end='')
                print ('{:8s} \\\\'.format(result['jitter']['mean']))

if __name__ == '__main__':
    main()
